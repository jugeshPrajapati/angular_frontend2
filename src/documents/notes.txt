to install angular cli and create new project
nvm list
>nvm use 18.16.0
bunx --bun @angular/cli@17 new angular_frontend1

bunx --bun @angular/cli@version new project_name --no-standalone

--no-standalone treat app-component as non main file so it could be import 

to start and run the project
bun run start or 
bunx ng serve 
1. bun run start
Explanation:

This command uses bun to run the script defined in the "start" field of your package.json file.
The "start" script is defined as "ng serve", so running bun run start will execute the ng serve command, which starts the Angular development server.
How It Works:

bun run is similar to npm run or yarn run. It looks in the package.json file for a script named start and executes it.
Since "start": "ng serve" is defined in package.json, bun run start triggers ng serve, which launches the Angular app.
2. bunx ng serve
Explanation:

The bunx command is analogous to npx in Node.js. 
It runs executables from node_modules/.bin without needing to specify the full path.
ng is the Angular CLI command, and serve is the specific command that starts the development server.

Standalone components are a new type of Angular component that does not need to be declared in a NgModule.

These are components that can be used directly in the template of another component without being part
of an NgModule, or imported in an NgModule.
Your application developed with NgModules is probably relatively monolithic,
even though NgModules are supposed to help you modularize your application

https://blog.angular-university.io/angular-standalone-components/

types of component > selector
@component({
    selector : 'html-tag' // selector as element
    selector : [html-attribute] // selector as attribute
    selector : '.html-class' // selector as class
})

use -
<html>
<html-tag> </html-tag>
<div html-attribute> </div>
<div class='html-class'> </div>
</html>

add bootstrap setting in angular.json > style > 
 "node_modules/bootstrap/dist/css/bootstrap.min.css",

data binding - {{value}}  //value come from component eg. <p> hello {{name}}</p> name declare in component class
property binding - [name] = 'value' //see  data passing parent to child component below
event binding - (name) = 'function()'
interpolation - {{this.status}}
$event - (event-name) = 'function($event)' //send input to component
example -
in component
updateName(event : KeyboardEvent){
    this.name (<HTMLInputElement> event.target).value
    //or 
    this.name (event.target as HTMLInputElement).value
}
in html
<input (keyup) ="updateName($event)/>

two way data binding - [(ngModel)] = "value" // automatically update value in component and frontend 
it should import from angular form

if else in angular html - 
<div *ngif ="True; else ids "> True </div>
<ng-template #ids> <p> else condition </p>
</ng-template>

[ngStyle] ="{'background-color':'red'}" //inline style in html
[ngClass] = "{'property/css': condition}" //"{'disabled':disabledFlag==true}"
if css file contain '-' u need to use '' ,eg =  'custom-background'
data passing parent to child component

data(item) in parent component -> using child tag in parent html ** <child *ngFor="let item of items" [listItem] = "item"> </child> **
-> passing data [listItem] using property binding -> declare property in child component ** @Input () listItem: any; **
-> use data in child html using data binding ** <li>{{listItem}}</li> **

data passing child to parent component
call function on any event <li (click) ="itemClicked(listItem)">{{listItem}}</li> , listItem should be input property in child component
-> initialize event which emit the value  @Output() itemVal = new EventEmitter<string>(); 
-> send value using any function, itemClicked(listItem:string){ this.itemVal.emit(listItem);}
-> <app-dynamic-list (itemVal) = "itemClicked1($event)" > call child event (itemVal) in parent html 
and send emitted/output value to function  using $event 
-> receive value in parent component , itemClicked1(itemVal:string){
    console.log('child to parent',itemVal);
  };

  https://v17.angular.io/guide/inputs-outputs 

  <ng-content> - add dynamic prefix
  <input #username> - #username is local reference could pass to any function
  @ViewChild('username) userName: any  - ViewChild get the value from html element
  console.log(this.userName.nativeElement.value) - to get the value

  add script file in main html header using angular.json
   "scripts": [
              "./node_modules/jquery/dist/jquery.js",
              "./node_modules/bootstrap/dist/js/bootstrap.js",
              "./node_modules/htmx.org/dist/htmx.min.js"
            ],

 https://htmx.org/docs/
 https://medium.com/@bhargavr445/routing-in-angular-stand-alone-apps-2682b4de756e 

false , '',null,undefined, 0  assume as false

viewchild monitor element in same component
// viewchild first argument, read : use it to read token from the queried from element 
  // static: it determine when the query is resolved , false when resolved on change
  // @ViewChild(componentName) variable : componentName; or we can use this
  @ViewChild('templateInputRef',{static:true}) searchChildElement !: ElementRef;
viewchild only return first element value

@ViewChildren return list of  multiple element of same name
@ViewChildren('componentName/#templateReference') variable : QueryList <ElementRef>;
iterate the list to get value
variable.forEach((element)=>{
    console.log(element.nativeElement.value)
})
it determine only when the query is resolved when detect change

@ContentChild is same as viewchild but it monitor element in child component

<ng-template #templateReference> content </ng-template>
<ng-container *ngTemplateOutlet= " templateReference" > </ng-container>
ng-container does not render itself in DOM like div block , and only show its content
best use with other structural directive instead of event

<ng-content> is a way to pass content from child to parent
https://danywalls.com/how-to-get-and-use-ng-template-ng-container-and-ng-content

ngOnChanges hook called whenever any @input property get change
import {OnChanges,OnInit} from '@angular/core';
class ClassName implements OnChanges, OnInit{
    ngOnChanges(){};
    ngOnInit(){};
}

ngOnInit hook raises after it create the component and update its input properties.
this hook is raised after ngOnChanges


ngDoCheck invokes during every change detection cycle this hook invoked even there is no change in input bound property
eg. click button which does not do anything but still change detection cycle will run ngDoCheck

ngAfterContentInit update property decorated with @ContentChild before this hook raised


In Angular, both `inject()` and `@Inject` are used for dependency injection, but they serve different purposes and are used in different contexts:

### 1. `inject()`
- **Function-based DI (Introduced in Angular 14):** `inject()` is used within functions or factory methods where the dependency is injected imperatively. It's ideal for scenarios where decorators cannot be applied, such as within functions or services.
- **Usage Context:** `inject()` is typically used in service constructors, in custom hooks, or in standalone functions that need to manually retrieve dependencies.
- **Example Usage:**
  ```typescript
  import { inject } from '@angular/core';
  import { MyService } from './my-service';

  function myCustomFunction() {
      const service = inject(MyService);
      // Use the injected service
  }
  ```

- **Use Case:** `inject()` is more flexible for dynamic dependency injection and can be useful in more functional programming styles or when working outside of classes.

### 2. `@Inject`
- **Decorator-based DI:** `@Inject` is used to explicitly inject a dependency where type information alone is not sufficient. It is used in constructor parameters to indicate that a specific token should be injected.
- **Usage Context:** This is commonly used when injecting tokens that are either primitive values (like strings or numbers) or non-class-based tokens (e.g., InjectionTokens).
- **Example Usage:**
  ```typescript
  import { Inject, Injectable } from '@angular/core';
  import { SOME_TOKEN } from './tokens';

  @Injectable({
    providedIn: 'root',
  })
  export class MyService {
    constructor(@Inject(SOME_TOKEN) private tokenValue: string) {
      // tokenValue will be injected
    }
  }
  ```

- **Use Case:** `@Inject` is required when the dependency being injected cannot be inferred from the parameter's type (e.g., when using InjectionToken or primitive types).

### Key Differences:
1. **Context of Use:**
   - `@Inject`: Used in **constructor parameters**.
   - `inject()`: Used inside **functions**, **factories**, or any place where decorators can't be applied.
   
2. **Explicit vs. Implicit:**
   - `@Inject`: More explicit and is required for tokens that can't be inferred (like InjectionTokens).
   - `inject()`: More implicit, used to fetch dependencies directly inside a function.

3. **Angular Version:**
   - `@Inject` has been available since earlier Angular versions.
   - `inject()` is relatively new (introduced in Angular 14).

Both serve to inject dependencies, but the key difference lies in their usage patterns.
()=>{

} arrow function point to outer scope so it can use this keyword out side of its parent function

 RxJS methods - Of() & From(). Both of these operators are used to create an observable.
Of operators automatically emit complete signal;
from operators only take single iterable argument

routerLink= "/about" , it is absolute path it append path behind the root path 
routerLink = "about" or "./about" or "../about" for one lvl back , it is relative path it append path currently active route

Query string are the optional parameter in url
ex = /about?search=value&time=today
fragment or section on package
ex = /home#images
child routes
{path:'courses',component: ComponentName},
{path:'courses',children: [
  {path:'/:id', component: ChildComponent}
  {path:'list/:id', component: ChildComponent2}
]}

arrow function-
()=> expression // by default return value
()=>{return expression} //with curly braces have to add return
Because arrow functions use curly brackets, {} you cannot implicitly return an object

import { DOCUMENT } from '@angular/common';

{{value | async}} this pipe wait for data before render

in ngForm buttons are by default submit type .

this.form.form.pathValue({
  fieldName  : value 
})

rajankumarsingh@cdac.in
123abc
rajankumar@cdac.in

nvm-----
nvm ls
nvm use 20.5.1